package assistance

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

func WarningLocation(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	reply := "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å –±–ª–∏–∂–∞–π—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –º–µ—Å—Ç–∞,–Ω–∞–º —Å–ª–µ–¥—É–µ—Ç –∑–Ω–∞—Ç—å –≤–∞—à–∏ –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è," +
		"—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –Ω–∏—Ö –º—ã —Å–º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –±–ª–∏–∂–∞–π—â–∏–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π—à–∏–µ –º–µ—Å—Ç–∞."
	menu := tgbotapi.ReplyKeyboardMarkup{
		Keyboard: [][]tgbotapi.KeyboardButton{
			{
				tgbotapi.NewKeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—Å—è —Å –∫–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"),
			},
		},
		ResizeKeyboard: true,
	}
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
	msg.ReplyMarkup = menu
	if _, err := bot.Send(msg); err != nil {
		log.Fatalf("[WarningLocation] : %v", err)
	}
}

func AboutBot(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	reply := "CityCompanion - –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ë–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –ø–æ–∏—Å–∫ —Å–∞–º—ã—Ö –±–ª–∏–∂–∞–π—à–∏—Ö –∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –º–µ—Å—Ç," +
		"–∞ —Ç–∞–∫–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è, –∏—Å—Ö–æ–¥—è –∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
	if _, err := bot.Send(msg); err != nil {
		log.Fatalf("[AboutBot] : %v", err)
	}
}

func ParseRadius(radius string) {
	if radius == "" {
		return
	}

	if strings.HasSuffix(radius, "–∫–º") {
		radius = strings.TrimSuffix(radius, "–∫–º")
		num, err := strconv.ParseFloat(radius, 64)
		if err != nil {
			Error("Failed to parse radius to float64", err.Error())
		} else {
			meter := num * 1000
			radius = strconv.Itoa(int(meter))
		}

	} else if strings.HasSuffix(radius, "–º") {
		radius = strings.TrimSuffix(radius, "–º")
	}

	fmt.Println("Here1: ",radius)
}

func IsRadiusCorrect(radius string) bool {
	if strings.HasSuffix(radius, "–∫–º") {
		radius = strings.TrimSuffix(radius, "–∫–º")
		num, err := strconv.ParseFloat(radius, 64)
		if err != nil {
			return false
		} else if num < 0 {
			return false
		}
		return true
	} else if strings.HasSuffix(radius, "–º") {
		radius = strings.TrimSuffix(radius, "–º")
		num, err := strconv.ParseFloat(radius, 64)
		if err != nil {
			return false
		} else if num < 0 {
			return false
		}
		return true
	}
	return false
}
