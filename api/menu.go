package api

import (
	"github.com/TechSir3n/CityCompanion/assistance"
	_ "github.com/TechSir3n/CityCompanion/database"
	"github.com/go-telegram-bot-api/telegram-bot-api"
	"log"
	"os"
)

func CreateButton() {
	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_API_TOKEN"))
	if err != nil {
		log.Fatalf("Error[CreateButtonFunc] : %v", err)
	}

	bot.Debug = false

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)
	var msgN tgbotapi.MessageConfig
	var msg tgbotapi.MessageConfig

	for update := range updates {
		if update.Message == nil {
			continue
		}

		switch update.Message.Text {
		case "/start":
			reply := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CityCompanion! –Ø –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –≥–∏–¥ –ø–æ –≥–æ—Ä–æ–¥—É. " +
				"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ: –æ—Ç —É—é—Ç–Ω—ã—Ö –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤ –∏ –ø–∞—Ä–∫–æ–≤ —Å –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞–º–∏." +
				"–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ª—É—á—à–∏–º–∏ –º–µ—Å—Ç–∞–º–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ! "
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, reply)
			msg.ReplyMarkup = createMainMenu()

			bot.Send(msg)
			break
		case "‚ùóÔ∏è–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é":
			msgN = tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
			msgN.ReplyMarkup = createNeedAction()
			bot.Send(msgN)
			break
		case "üìç –ü–æ–¥–µ–ª–∏—Ç—Å—è —Å –∫–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è":
			AskCoordinates(bot, update)
			break
		case "üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞":
			reply := "–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –º–µ—Å—Ç?" +
				" –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å –±–æ—Ç—É –∏—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞, –Ω–µ –ø—Ä–µ–≤—ã—â–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å(—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ),—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–±–ª–µ–∂—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –æ—Ç –º–µ—Å—Ç–∞ –≤–∞—à–µ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è"

			yesBTN := tgbotapi.NewKeyboardButton("–î–∞")
			noBTN := tgbotapi.NewKeyboardButton("–ù–µ—Ç")

			keyboard := tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(yesBTN, noBTN),
			)

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
			msg.ReplyMarkup = keyboard
			bot.Send(msg)
			break
		case "/about":
			assistance.AboutBot(bot, update)
			break
		case "/showmenu":
			msgN = tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
			msgN.ReplyMarkup = createNeedAction()
			bot.Send(msgN)

			break
		case "/sendlocation":
			AskCoordinates(bot, update)
			break
		case "/adjustradius":
			break

		case "üçΩÔ∏è –ö–∞—Ñ–µ-–†–µ—Å—Ç–æ—Ä–∞–Ω—ã":
			if isCoordinatesShared() {

			} else {
				assistance.WarningLocation(bot, update)
			}

			break

		case "üé°üé¢ –ü–∞—Ä–∫–∏-–ê—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã":
			if isCoordinatesShared() {

			} else {
				assistance.WarningLocation(bot, update)
			}

			break

		case "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –û—Ç–¥—ã—Ö —Å –¥–µ—Ç—å–º–∏":
			if isCoordinatesShared() {

			} else {
				assistance.WarningLocation(bot, update)
			}

			break

		case "üèùÔ∏è –ü–ª—è–∂–∏":
			if isCoordinatesShared() {

			} else {
				assistance.WarningLocation(bot, update)
			}

			break

		case "üîç –î–æ—Å—Ç–æ–ø—Ä–µ–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏":
			if isCoordinatesShared() {

			} else {
				assistance.WarningLocation(bot, update)
			}

			break

		case "üé¨ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤":
			if isCoordinatesShared() {

			} else {
				assistance.WarningLocation(bot, update)
			}

			break

		case "üèãÔ∏è‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ãe –ó–∞–ª—ã":
			if isCoordinatesShared() {

			} else {
				assistance.WarningLocation(bot, update)
			}

			break

		case "üèÉ‚Äç‚ôÄÔ∏è C–ø–æ—Ä—Ç –ø–ª–æ—â–∞–¥–∫–∏":
			if isCoordinatesShared() {

			} else {
				assistance.WarningLocation(bot, update)
			}

			break

		case "üé§ –ö–∞—Ä–∞–æ–∫–µ":
			if isCoordinatesShared() {

			} else {
				assistance.WarningLocation(bot, update)
			}

			break

		case "üë©‚Äç‚öïÔ∏èüíâ –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å":
			if isCoordinatesShared() {

			} else {
				assistance.WarningLocation(bot, update)
			}

			break

		case "üíµ –ë–∞–Ω–∫–æ–º–∞—Ç—ã":
			if isCoordinatesShared() {

			} else {
				assistance.WarningLocation(bot, update)
			}

			break

		default:
			handleRadiusResponse(bot, update,updates)
			handleGeocoding(bot, update)
			break
		}

	}
}

func createNeedAction() tgbotapi.ReplyKeyboardMarkup {
	replyMarkup := tgbotapi.ReplyKeyboardMarkup{
		Keyboard: [][]tgbotapi.KeyboardButton{
			{
				tgbotapi.NewKeyboardButton("üçΩÔ∏è –ö–∞—Ñ–µ-–†–µ—Å—Ç–æ—Ä–∞–Ω—ã"),
				tgbotapi.NewKeyboardButton("üé°üé¢ –ü–∞—Ä–∫–∏-–ê—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã"),
				tgbotapi.NewKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –û—Ç–¥—ã—Ö —Å –¥–µ—Ç—å–º–∏"),
			},
			{
				tgbotapi.NewKeyboardButton("üèùÔ∏è –ü–ª—è–∂–∏"),
				tgbotapi.NewKeyboardButton("üîç –î–æ—Å—Ç–æ–ø—Ä–µ–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"),
				tgbotapi.NewKeyboardButton("üé¨ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤"),
			},
			{
				tgbotapi.NewKeyboardButton("üèãÔ∏è‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ãe –ó–∞–ª—ã"),
				tgbotapi.NewKeyboardButton("üèÉ‚Äç‚ôÄÔ∏è C–ø–æ—Ä—Ç –ø–ª–æ—â–∞–¥–∫–∏"),
				tgbotapi.NewKeyboardButton("üé§ –ö–∞—Ä–∞–æ–∫–µ"),
			},
			{
				tgbotapi.NewKeyboardButton("üë©‚Äç‚öïÔ∏èüíâ –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å"),
				tgbotapi.NewKeyboardButton("üíµ –ë–∞–Ω–∫–æ–º–∞—Ç—ã"),
			},
		},
		ResizeKeyboard: true,
	}

	return replyMarkup
}

func createMainMenu() tgbotapi.ReplyKeyboardMarkup {
	menu := tgbotapi.ReplyKeyboardMarkup{
		Keyboard: [][]tgbotapi.KeyboardButton{
			{
				tgbotapi.NewKeyboardButton("‚ùóÔ∏è–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
				tgbotapi.NewKeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—Å—è —Å –∫–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"),
				tgbotapi.NewKeyboardButton("üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞"),
			},
		},
		ResizeKeyboard: true,
	}
	return menu
}
