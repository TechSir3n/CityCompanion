package api

import (
	"log"
	"os"
	"fmt"
	_ "github.com/TechSir3n/CityCompanion/database"
	"github.com/go-telegram-bot-api/telegram-bot-api"
)

//if update.Message.Location == nil {
//	bot.Send("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∫–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –î–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ –º–µ—Å—Ç")
//}

func CreateButton() {
	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_API_TOKEN"))
	if err != nil {
		log.Fatalf("Error[CreateButtonFunc] : %v", err)
	}

	bot.Debug = false

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates, err := bot.GetUpdatesChan(u)
	var msgN tgbotapi.MessageConfig

	for update := range updates {
		if update.Message == nil {
			continue
		}

		if update.CallbackQuery != nil {
			callbackData := update.CallbackQuery.Data
			switch callbackData {
			case "action1":
				fmt.Println("Here action1")
			  // –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–∞—Ä–∫–∏-–ê—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã"
			// –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
			}
		  } else { 
			fmt.Println("Is nil")
		  }
		

		switch update.Message.Text {
		case "/start":
			reply := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CityCompanion! –Ø –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –≥–∏–¥ –ø–æ –≥–æ—Ä–æ–¥—É. " +
				"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ: –æ—Ç —É—é—Ç–Ω—ã—Ö –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤ –∏ –ø–∞—Ä–∫–æ–≤ —Å –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞–º–∏." +
				"–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ª—É—á—à–∏–º–∏ –º–µ—Å—Ç–∞–º–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ! "
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)
			msg.ReplyMarkup = createMainMenu()

			bot.Send(msg)
		case "‚ùóÔ∏è–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é":
			msgN = tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
			msgN.ReplyMarkup = createNeedAction()

			bot.Send(msgN)
		case "üìç –ü–æ–¥–µ–ª–∏—Ç—Å—è —Å –∫–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è":
			setLocation(update)
		default:
			reply := "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã –≥–æ–≤–æ—Ä–∏—Ç–µ."
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, reply)

			bot.Send(msg)
		}

	}
}

func createNeedAction() tgbotapi.InlineKeyboardMarkup {
	replyMarkup := tgbotapi.InlineKeyboardMarkup{
		InlineKeyboard: [][]tgbotapi.InlineKeyboardButton{
			{
				tgbotapi.NewInlineKeyboardButtonData("üçΩÔ∏è –ö–∞—Ñ–µ-–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "action1"),
				tgbotapi.NewInlineKeyboardButtonData("üé°üé¢ –ü–∞—Ä–∫–∏-–ê—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã", "action2"),
				tgbotapi.NewInlineKeyboardButtonData("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –û—Ç–¥—ã—Ö —Å –¥–µ—Ç—å–º–∏", "action3"),
			},
			{
				tgbotapi.NewInlineKeyboardButtonData("üèùÔ∏è –ü–ª—è–∂–∏", "action4"),
				tgbotapi.NewInlineKeyboardButtonData("üîç –î–æ—Å—Ç–æ–ø—Ä–µ–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "action5"),
				tgbotapi.NewInlineKeyboardButtonData("üé¨ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∏–ª—å–º–æ–≤", "action6"),
			},
			{
				tgbotapi.NewInlineKeyboardButtonData("üèãÔ∏è‚Äç‚ôÄÔ∏è –¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ãe –ó–∞–ª—ã", "action7"),
				tgbotapi.NewInlineKeyboardButtonData("üèÉ‚Äç‚ôÄÔ∏è C–ø–æ—Ä—Ç –ø–ª–æ—â–∞–¥–∫–∏", "action8"),
				tgbotapi.NewInlineKeyboardButtonData("üé§ –ö–∞—Ä–∞–æ–∫–µ", "action9"),
			},
			{
				tgbotapi.NewInlineKeyboardButtonData("üë©‚Äç‚öïÔ∏èüíâ –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å", "action10"),
				tgbotapi.NewInlineKeyboardButtonData("üíµ –ë–∞–Ω–∫–æ–º–∞—Ç—ã", "action11"),
			},
		},
	}

	return replyMarkup
}

func createMainMenu() tgbotapi.ReplyKeyboardMarkup {
	menu := tgbotapi.ReplyKeyboardMarkup{
		Keyboard: [][]tgbotapi.KeyboardButton{
			{
				tgbotapi.NewKeyboardButton("‚ùóÔ∏è–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
				tgbotapi.NewKeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—Å—è —Å –∫–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"),
			},
		},
		ResizeKeyboard: true,
	}
	return menu
}
