package api

import (
	"context"
	"fmt"
	"github.com/TechSir3n/CityCompanion/assistance"
	"github.com/TechSir3n/CityCompanion/database"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

func commandsBot(bot *tgbotapi.BotAPI, update tgbotapi.Update, updates tgbotapi.UpdatesChannel) {
	commands := assistance.NewComnands()
	var msgN tgbotapi.MessageConfig
	var msg tgbotapi.MessageConfig

	inlineKeyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("\U0001F5D1  –£–¥–∞–ª–∏—Ç—å", "buttonDelete"),
			tgbotapi.NewInlineKeyboardButtonData("\U0001F4A6 –û—á–∏—Å—Ç–∏—Ç—å", "buttonClean"),
		),
	)

	switch update.Message.Text {
	case commands.Start:
		reply := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CityCompanion! –Ø –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –≥–∏–¥ –ø–æ –≥–æ—Ä–æ–¥—É. " +
			"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ: –æ—Ç —É—é—Ç–Ω—ã—Ö –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–æ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤ –∏ –ø–∞—Ä–∫–æ–≤ —Å –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞–º–∏." +
			"–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –ª—É—á—à–∏–º–∏ –º–µ—Å—Ç–∞–º–∏ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ! "
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, reply)
		msg.ReplyMarkup = createMainMenu()
		bot.Send(msg)
	case commands.Menu:
		msgN = tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
		msgN.ReplyMarkup = createNeedAction()
		bot.Send(msgN)
	case commands.Coordinates:
		AskCoordinates(bot, update, updates)
	case commands.Radius:
		assistance.AdjuctRadiusSearch(bot, update)
	case commands.About:
		assistance.AboutBot(bot, update)
	case commands.Menu:
		msgN = tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")
		msgN.ReplyMarkup = createNeedAction()
		bot.Send(msgN)
	case commands.SendLocation:
		AskCoordinates(bot, update, updates)
	case commands.GetLocation:
		if street, err := getUserStreet(update.Message.Chat.ID); street == "" || err != nil {
			fmt.Printf("User street error : %v", err)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.")
			bot.Send(msg)
		} else {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, street)
			bot.Send(msg)
		}
	case commands.FavoritePlace:
		f_db := database.NewFavoritePlacesImp(database.DB)
		if names, addresses, err := f_db.GetFavoritePlaces(context.Background(), update.Message.Chat.ID); err != nil ||
			names == nil && addresses == nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –µ—â–µ –Ω—ë—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç")
			bot.Send(msg)
		} else {
			var message string
			for i := range names {
				message += fmt.Sprintf("%d. %s - %s\n", i+1, names[i], addresses[i])
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)

			for upd := range updates {
				if upd.CallbackQuery != nil {
					redactionFavoritePlace(bot, update, update.Message.Chat.ID, updates)
					break
				} else {
					return
				}
			}
		}

	case commands.SavedPlace:
		s_db := database.NewSavedPlacesImpl(database.DB)
		if names, addresses, err := s_db.GetSavePlaces(context.Background(), update.Message.Chat.ID); err != nil ||
			names == nil && addresses == nil {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –µ—â–µ –Ω—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–µ—Å—Ç")
			bot.Send(msg)
		} else {
			var message string
			for i := range names {
				message += fmt.Sprintf("%d. %s - %s\n", i+1, names[i], addresses[i])
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, message)
			msg.ReplyMarkup = inlineKeyboard
			bot.Send(msg)

			for upd := range updates {
				if upd.CallbackQuery != nil {
					redactionSavePlace(bot, upd, update.Message.Chat.ID, updates)
					break
				} else {
					return
				}
			}

		}

	case commands.AdjustRadius:
		assistance.AdjuctRadiusSearch(bot, update)

	default:
		handleRadiusResponse(bot, update, updates)
		handleGeocoding(bot, update)
	}
}

func createNeedAction() tgbotapi.ReplyKeyboardMarkup {
	categories := assistance.NewPlaceCategories()
	replyMarkup := tgbotapi.ReplyKeyboardMarkup{
		Keyboard: [][]tgbotapi.KeyboardButton{
			{
				tgbotapi.NewKeyboardButton(categories.CafeAndRestaurants),
				tgbotapi.NewKeyboardButton(categories.CoffeeAndTea),
				tgbotapi.NewKeyboardButton(categories.JapaneseFood),
			},
			{
				tgbotapi.NewKeyboardButton(categories.Beaches),
				tgbotapi.NewKeyboardButton(categories.SightsAndNature),
				tgbotapi.NewKeyboardButton(categories.CityParks),
			},
			{
				tgbotapi.NewKeyboardButton(categories.GymAndStudios),
				tgbotapi.NewKeyboardButton(categories.HealthAndBeautyServices),
				tgbotapi.NewKeyboardButton(categories.ChurchesAndMosques),
			},
			{
				tgbotapi.NewKeyboardButton(categories.Shops),
				tgbotapi.NewKeyboardButton(categories.Bars),
				tgbotapi.NewKeyboardButton(categories.ConfectioneryStores),
				tgbotapi.NewKeyboardButton(categories.Hotels),
			},
		},
		ResizeKeyboard: true,
	}
	replyMarkup.OneTimeKeyboard = true
	return replyMarkup
}

func createMainMenu() tgbotapi.ReplyKeyboardMarkup {
	menu := tgbotapi.ReplyKeyboardMarkup{
		Keyboard: [][]tgbotapi.KeyboardButton{
			{
				tgbotapi.NewKeyboardButton("‚ùóÔ∏è–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
				tgbotapi.NewKeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—Å—è —Å –∫–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"),
				tgbotapi.NewKeyboardButton("üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞"),
			},
		},
		ResizeKeyboard: true,
	}
	return menu
}
